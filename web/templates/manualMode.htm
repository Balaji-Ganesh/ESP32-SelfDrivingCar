{% extends 'base.html' %} 

{% block title %} Manual Mode - Self-driving car {%endblock %} 

{% block page_heading %}
<div class="container page-header" style="margin-top: 0px">
  <h1>Manual Mode</h1>
  <p class="text-muted">
    In this mode, car can be used as a survelliance bot by issuing manual
    controls. Simply like a RC car with a remote.
  </p>
</div>
{% endblock %}


{% block main %}
<div class="container">
  <div class="panel panel-default">
    <div class="panel-heading"><b>Tweakable Features</b></div>
    <div class="panel-body">
      <form class="form-inline" action="" method="">
        <div class="form-group">
          <div class="col-sm-offset-2 col-sm-12">
            <div class="checkbox">
              <label><input type="checkbox" id="camera_streaming" value="0"/> Camera Streaming</label>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="col-sm-offset-2 col-sm-12">
            <div class="checkbox">
              <label><input type="checkbox" id="collision_avoidance" value="0"/> Collision Avoidance</label>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="col-sm-offset-2 col-sm-12">
            <div class="checkbox">
              <label><input type="checkbox"  id="navigation_controls" value="0"/> Navigation Controls</label>
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="col-sm-offset-2 col-sm-12">
            <div class="checkbox">
              <label><input type="checkbox" id="log_msgs" value="0"/> Log messages </label>
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
  <div class="monitor row">
    <div class="panel-group col-sm-6">
      <div class="camera-feed panel panel-default">
        <div class="panel-heading"><b>Feed</b></div>
        <div class="panel-body">
          <!-- A window like google meet to stream camera data. -->
          <p>Camera Feed</p>
          <!-- FIXME: Display a dummy image (same size of feed) until user initiates streaming. -->
          <!-- When tried the actual url "/feed/camera" getting error. But with this, in browser getting the actual url in source. Wonder..!!  -->
          <!-- <img
            class="img-thumbnail"
            alt="camera feed"
            id="cam_feed"
          /> -->
          <img id="cam_img">          
          <div class="collision-avoidance-feed">
            <form class="form-inline" action="" method="">
              <div class="form-group">
                <label for="collision_thresh"
                  >Adjust Collision threshold value</label
                >
                <span></span>
                <input
                  type="range"
                  min="10"
                  max="400"
                  id="collision_thresh"
                />
              </div>
            </form>
            <p>
              Collision detected at:
              <span id="collision-dist">XX</span>cm
            </p>
          </div>
        </div>
      </div>
    </div>
    <div class="navigation col-sm-6 row">
      <div class="directions col-sm-4">
        <div class="panel panel-default">
          <div class="panel-heading"><b>Directions</b></div>
          <div class="panel-body">
            <table>
              <tr>
                <td></td>
                <td>
                  <button class="btn btn-block">
                    <i class="bi bi-arrow-up"></i>
                  </button>
                </td>
                <td></td>
              </tr>
              <tr>
                <td>
                  <button class="btn btn-block">
                    <i class="bi bi-arrow-left"></i>
                  </button>
                </td>
                <td></td>
                <td>
                  <button class="btn btn-block">
                    <i class="bi bi-arrow-right"></i>
                  </button>
                </td>
              </tr>
              <tr>
                <td></td>
                <td>
                  <button class="btn btn-block">
                    <i class="bi bi-arrow-down"></i>
                  </button>
                </td>
                <td></td>
              </tr>
            </table>
          </div>
        </div>
      </div>
      <div class="speed-control col-sm-8">
        <div class="panel-group">
          <div class="panel panel-default">
            <div class="panel-heading"><b>Other controls</b></div>
            <div class="panel-body">
              <label for="speed">Speed: </label>
              <span style="color: blue; padding-left: 5px"
                ><b>50</b></span
              >
              <div class="row"></div>
              <input
                type="range"
                id="speed"
                class="custom-range"
                min="100"
                max="255"
              />
              <label for="light">Light: </label>
              <span style="color: blue; padding-left: 5px"
                ><b>50</b></span
              >
              <input
                type="range"
                id="light"
                class="custom-range"
                min="100"
                max="255"
              />
            </div>
          </div>
        </div>
      </div>
      
      <div class="log-messages col-sm-12">
        <div class="panel panel-default ">
          <div class="panel-heading"><b>Logs</b></div>
          <div class="panel-body">Use lists of Bootstrap. Design: like that YouTube + Console log messages.</div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block socketio_connection %}
<script type="text/javascript" charset="utf-8">
  /******************************************************** Necessary setups ... ****************************************/
    // uncheck all the checkboxes, on loading of page.
    document.onload = ()=>{
      var inputs = document.getElementsByTagName('input');

      for (var i=0; i<inputs.length; i++)  {
        if (inputs[i].type == 'checkbox')   {
          inputs[i].checked = false;
        }
      }
    }

    /********************************************* SOCKETIO Connection ******************************************************* */

    const socket = io.connect('http://127.0.0.1:8000'); // url of the python server, later use namespace/room specific to mode
    
    // --------------------------------------------- general socketio handlers --------------------------------------------
    socket.on('connect', function(){
      socket.emit('ack', {
        msg: 'CONN_ESTABLISHED'
      });
      console.log('Connected to server')
    });

    socket.on('disconnect', function(){
      console.log("Disconnecting with the server")
      socket.emit('ack', {
        msg: 'CONN_TERMINATED'
      });
    })

    socket.on('message', (data)=>{
      console.log('server says: ', JSON.parse(data))
    })
    
    // if(confirm("Start streaming?") == true){
    //   console.log('streaming begins...')
    //   socket.emit('stream', {msg: 'start streaming'})
    // }

    // --------------------------------------------- socketio handlers, specifically for features
    socket.on('img_data', function(msg){
      console.log("Image received")
      const img_element = document.getElementById("cam_img")
      console.log(typeof(img_element))
      console.log(img_element)
      img_element.src="data:image/jpeg;base64,"+msg;
    })
    socket.on('collsion_data', function(msg){
      console.log("collision data received")
      const span_element = document.getElementById("collision-dist")
      console.log(msg)
      span_element.textContent=msg;
    })


    //-------------------------------------------------------- Adding event listeners to features..
    const cam_chkbx = document.getElementById('camera_streaming')
    cam_chkbx.addEventListener('change', (event) => {
      if (event.currentTarget.checked) {
        socket.emit('camera_feed', 'start')
        console.log("[cam] gave start command")
      } else {
        socket.emit('camera_feed', 'stop')
        console.log("[cam] gave stop command")
      }
    });

    const collision_chkbx = document.getElementById('collision_avoidance')
    collision_chkbx.addEventListener('change', (event) => {
      if (event.currentTarget.checked) {
        socket.emit('collision_feed', 'start')
        console.log("[coll] gave start command")
      } else {
        socket.emit('collision_feed', 'stop')
        console.log("[coll] gave stop command")
      }
    });
</script>
{% endblock %}
